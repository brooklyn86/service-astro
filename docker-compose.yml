version: '3.7'
services:
    krakend_ce:
      # The :watch image restarts the service automatically when the configuration files change.
      # Do not use this image in production, it's meant to speed up your testing and development.
      image: devopsfaith/krakend:watch
      volumes:
        - ./Gateways/krakend/config/krakend:/etc/krakend
      ports:
        - "1234:1234"
        - "8080:8080"
        - "8090:8090"
      command: ["run", "-d", "-c", "/etc/krakend/krakend.json"]
      depends_on:
        - fake_api
        - jaeger
    grafana:
      image: grafana/grafana:9.1.2
      ports:
        - "4000:3000"
      volumes:
        - "./Gateways/krakend/config/grafana/datasources/all.yml:/etc/grafana/provisioning/datasources/all.yml"
        - "./Gateways/krakend/config/grafana/dashboards/all.yml:/etc/grafana/provisioning/dashboards/all.yml"
        - "./Gateways/krakend/config/grafana/krakend:/var/lib/grafana/dashboards/krakend"
    influxdb:
      image: influxdb:1.8.10
      environment:
        - "INFLUXDB_DB=krakend"
        - "INFLUXDB_USER=krakend-dev"
        - "INFLUXDB_USER_PASSWORD=pas5w0rd"
        - "INFLUXDB_ADMIN_USER=admin"
        - "INFLUXDB_ADMIN_PASSWORD=supersecretpassword"
      ports:
        - "8086:8086"
    jaeger:
      image: jaegertracing/all-in-one:1
      ports:
        - "16686:16686"
        - "14268:14268"
    elasticsearch:
      image: elasticsearch:8.4.1
      environment:
        - "discovery.type=single-node"
        - "xpack.security.enabled=false"
        - "xpack.security.transport.ssl.enabled=false"
        - "xpack.security.http.ssl.enabled=false"
      ports:
        - "19200:9200"
        - "9300:9300"
    kibana:
      image: kibana:8.4.1
      ports:
        - "5601:5601"
    logstash:
      image: logstash:8.4.1
      ports:
        - "12201:12201/udp"
        - "5044:5044"
      environment:
        - "xpack.monitoring.elasticsearch.url=http://elasticsearch:9200"
      volumes:
        - ./Gateways/krakend/config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      command: ["-f", "/usr/share/logstash/pipeline/logstash.conf"]
    rabbitmq:
      image: rabbitmq:3-management
      ports:
        - "15672:15672"
    fake_api:
      image: ghcr.io/lpereira/lwan:latest
      volumes:
        - ./data:/wwwroot
      ports:
        - "8000:8080"
    web:
      build:
        context: ./Gateways/krakend/images/spa-auth-web
      ports:
        - "3000:3000"
    jwt_revoke:
      build:
        context: ./Gateways/krakend/images/jwt-revoker
      ports:
        - "9000:8080"
      depends_on:
        - krakend_ce
      restart: always
    astro-mysql-database:
      build:
        context: Database/astro-mysql-database
        dockerfile: Dockerfile
      ports:
        - "3306:3036"
      env_file:
        - ./config/database.env
      volumes:
        - ./Database/mysql-volume:/var/lib/mysql
      networks:
        - astro-backend-networks
    service-astro-authentication:
      build:
        context: Services/service-authentication
        dockerfile: Dockerfile
      restart: always
      ports:
        - "8001:8001"
      env_file:
        - ./config/backend.env
      volumes:
        - "./Services/service-authentication/:/usr/service-authentication"
        - "./Prisma:/usr/service-authentication/prisma"
      networks:
        - astro-backend-networks

    # service-astro-users:
    #   build:
    #     context: Services/service-users
    #     dockerfile: Dockerfile
    #   restart: always
    #   ports:
    #     - "8002:8002"
    #   env_file:
    #     - ./config/backend.env
    #   volumes:
    #     - "./Services/service-users/:/usr/service-users"
    #     - "./Prisma:/usr/service-users/prisma"
    #   networks:
    #     - astro-backend-networks
    service-astro-shops:
      build:
        context: Services/service-shops
        dockerfile: Dockerfile
      restart: always
      ports:
        - "8004:8004"
      env_file:
        - ./config/backend.env
      volumes:
        - "./Services/service-shops/:/usr/service-shops"
        - "./Prisma:/usr/service-shops/prisma"
      networks:
        - astro-backend-networks
    service-astro-client:
      build:
        context: Services/service-clients
        dockerfile: Dockerfile
      restart: always
      ports:
        - "8005:8005"
      env_file:
        - ./config/backend.env
      volumes:
        - "./Services/service-clients/:/usr/service-client"
        - "./Prisma:/usr/service-clients/prisma"
      networks:
        - astro-backend-networks
    service-astro-categories:
      build:
        context: Services/service-categories
        dockerfile: Dockerfile
      restart: always
      ports:
        - "8006:8006"
      env_file:
        - ./config/backend.env
      volumes:
        - "./Services/service-categories/:/usr/service-categories"
        - "./Prisma:/usr/service-categories/prisma"
      networks:
        - astro-backend-networks
    service-astro-products:
      build:
        context: Services/service-products
        dockerfile: Dockerfile
      restart: always
      ports:
        - "8007:8007"
      env_file:
        - ./config/backend.env
      volumes:
        - "./Services/service-products/:/usr/service-products"
        - "./Primas:/usr/service-products/prisma"
      networks:
        - astro-backend-networks
    whoami:
      # A container that exposes an API to show its IP address
      image: traefik/whoami
      labels:
        - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"
    # astro-admin-frontend:
    #   build:
    #     context: Frontends/admin/astro-admin-frontend
    #     dockerfile: Dockerfile
    #   restart: always
    #   ports:
    #     - "3000:3000"
    #   env_file:
    #     - ./config/frontend.env
    #   volumes:
    #     - "./Frontends/admin/astro-admin-frontend/:/usr/astro-admin-frontend"
    #   networks:
    #     - astro-backend-networks

volumes:
    mysql-volume:
networks:
  astro-backend-networks: 