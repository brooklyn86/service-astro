generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Shop {
  id          String        @id @default(uuid())
  title       String
  client_id   String        @unique
  category_id String
  active      Boolean       @default(true)
  profile     ShopProfile[]
  client      Client?       @relation(fields: [client_id], references: [id])
  category    Category?     @relation(fields: [category_id], references: [id])
  created_at  DateTime      @default(now())
  updated_at  DateTime      @default(now())

  @@map("shops")
}

model ShopProfile {
  id          String   @id @default(uuid())
  shop_id     String   @unique
  description String
  profile_url String
  cover_url   String
  shop        Shop?    @relation(fields: [shop_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  @@index([shop_id])
  @@map("shop_profile")
}

model Client {
  id         String          @id @default(uuid())
  firstName  String
  lastName   String
  cnpj       String
  active     Boolean         @default(true)
  shops      Shop[]
  phones     ClientPhone[]
  address    ClientAddress[]
  emails     ClientEmail[]
  created_at DateTime        @default(now())
  updated_at DateTime        @default(now())

  @@map("clients")
}

model ClientPhone {
  id         String   @id @default(uuid())
  client_id  String   @unique
  ddd        String
  number     String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  client     Client?  @relation(fields: [client_id], references: [id])

  @@map("clients_phones")
}

model Category {
  id     String  @id @default(uuid())
  title  String
  shops  Shop[]
  active Boolean @default(true)

  @@map("categories")
}

model ClientAddress {
  id         String   @id @default(uuid())
  name       String
  client_id  String   @unique
  city       String
  country    String
  number     Int?
  place      String
  cep        String
  client     Client?  @relation(fields: [client_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("clients_address")
}

model ClientEmail {
  id         String   @id @default(uuid())
  client_id  String   @unique
  email      String
  client     Client?  @relation(fields: [client_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("clients_emails")
}

model User {
  id                String    @id @default(uuid())
  name              String?
  firstName         String?
  lastName          String?
  email             String    @unique
  username          String?   @unique
  password          String?
  password_recovery String?
  image             String?
  emailVerified     DateTime? @map("email_verified")
  accepted          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  Account           Account[]
  Session           Session[]

  @@map("users")
}

model Products {
  id             String         @id @default(uuid())
  name           String
  type           ProductType    @relation(fields: [productTypeId], references: [id])
  active         Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updateAt       DateTime       @updatedAt
  expireDate     DateTime
  productTypeId  String
  images         ProductImage[]
  productImageId String

  @@map("products")
}

model ProductType {
  id       String     @id @default(uuid())
  name     String
  Products Products[]

  @@map("products_types")
}

model ProductImage {
  id         String    @id @default(uuid())
  urlPath    String
  isCover    Boolean   @default(false)
  productsId String?
  products   Products? @relation(fields: [productsId], references: [id])

  @@map("products_images")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
